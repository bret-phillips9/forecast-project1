y1_full <- xts(x = time_clean$y1,
order.by = time_clean$timestamp,
frequency = 157824)
y2_full <- xts(x = time_clean$y2,
order.by = as.POSIXct(time_clean$timestamp),
frequency = 157824)
y1_null <- auto.arima(y = y1_full)
View(y1_full)
View(time_clean)
y1_full <- xts(x = time_clean$y1,
order.by = ymd_hms(time_clean$timestamp))
View(y1_full)
time_clean <- time_clean |>
filter(hms(timestamp) != "0S")
time_clean <- time_clean |>
filter(hms(timestamp) != 0)
View(time_clean)
time_clean <- time_raw |>
filter(!is.na(y1)) |>
filter(!is.na(y2)) |>
filter(!is.na(x1)) |>
filter(!is.na(x4)) |>
filter(!is.na(x5)) |>
filter(!is.na(x6)) |>
as.data.frame()
summary(time_clean)
time_clean <- time_clean |>
mutate(timestamp = ymd_hms(Description)) |>
mutate(day = ymd(substr(Description, start = 1, stop=10))) |>
mutate(hour = paste("2016-09-30 ", format(timestamp, "%H:%M:%S"))) |>
select(-Description)
summary(time_clean$timestamp)
time_clean <- time_clean |>
filter(hms(timestamp) = 0)
time_clean <- time_clean |>
filter(!hms(timestamp) = 0)
time_clean <- time_clean |>
filter(!hms(timestamp) == 0)
y1_full <- xts(x = time_clean$y1,
order.by = format(time_clean$timestamp, "%Y-%m-%d %h:%m:%s"))
View(time_raw)
time_raw |>
filter(is.na(y1))
time_clean <- time_raw |>
# need to try imputation instead of deletion
mutate(y1 = ifelse(is.na(y1), mean(y1), y1)) |>
mutate(y2 = ifelse(is.na(y2), mean(y2), y2)) |>
mutate(x1 = ifelse(is.na(x1), mean(x1), x1)) |>
mutate(x2 = ifelse(is.na(x2), mean(x2), x2)) |>
mutate(x3 = ifelse(is.na(x3), mean(x3), x3)) |>
mutate(x4 = ifelse(is.na(x4), mean(x4), x4)) |>
mutate(x5 = ifelse(is.na(x5), mean(x5), x5)) |>
mutate(x6 = ifelse(is.na(x6), mean(x6), x6)) |>
mutate(x7 = ifelse(is.na(x7), mean(x7), x7)) |>
mutate(x8 = ifelse(is.na(x8), mean(x8), x8)) |>
as.data.frame()
summary(time_clean)
time_raw |>
filter(is.na(y1))
time_clean <- time_clean |>
mutate(timestamp = ymd_hms(Description)) |>
mutate(day = ymd(substr(Description, start = 1, stop=10))) |>
mutate(hour = paste("2016-09-30 ", format(timestamp, "%H:%M:%S"))) |>
select(-Description)
summary(time_clean$timestamp)
daily <- time_clean |>
group_by(day) |>
summarize(y1 = mean(y1),
y2 = mean(y2),
x1 = mean(x1),
x2 = mean(x2),
x3 = mean(x3),
x4 = mean(x4),
x5 = mean(x5),
x6 = mean(x6),
x7 = mean(x7),
x8 = mean(x8))
hourly <- time_clean |>
group_by(hour) |>
summarize(y1 = mean(y1),
y2 = mean(y2),
x1 = mean(x1),
x2 = mean(x2),
x3 = mean(x3),
x4 = mean(x4),
x5 = mean(x5),
x6 = mean(x6),
x7 = mean(x7),
x8 = mean(x8))
ggplot(daily, aes(x=day, y=y1)) +
geom_point()
ggplot(hourly, aes(x=hour, y=y1)) +
geom_point()
summary(time_clean)
time_clean <- time_raw |>
# need to try imputation instead of deletion
mutate(y1 ~ ifelse(is.na(y1), mean(y1), y1)) |>
mutate(y2 ~ ifelse(is.na(y2), mean(y2), y2)) |>
mutate(x1 ~ ifelse(is.na(x1), mean(x1), x1)) |>
mutate(x2 ~ ifelse(is.na(x2), mean(x2), x2)) |>
mutate(x3 ~ ifelse(is.na(x3), mean(x3), x3)) |>
mutate(x4 ~ ifelse(is.na(x4), mean(x4), x4)) |>
mutate(x5 ~ ifelse(is.na(x5), mean(x5), x5)) |>
mutate(x6 ~ ifelse(is.na(x6), mean(x6), x6)) |>
mutate(x7 ~ ifelse(is.na(x7), mean(x7), x7)) |>
mutate(x8 ~ ifelse(is.na(x8), mean(x8), x8)) |>
as.data.frame()
time_clean <- time_raw |>
# need to try imputation instead of deletion
mutate(y1_i = ifelse(is.na(y1), mean(y1), y1)) |>
mutate(y2_i = ifelse(is.na(y2), mean(y2), y2)) |>
mutate(x1_i = ifelse(is.na(x1), mean(x1), x1)) |>
mutate(x2_i = ifelse(is.na(x2), mean(x2), x2)) |>
mutate(x3_i = ifelse(is.na(x3), mean(x3), x3)) |>
mutate(x4_i = ifelse(is.na(x4), mean(x4), x4)) |>
mutate(x5_i = ifelse(is.na(x5), mean(x5), x5)) |>
mutate(x6_i = ifelse(is.na(x6), mean(x6), x6)) |>
mutate(x7_i = ifelse(is.na(x7), mean(x7), x7)) |>
mutate(x8_i = ifelse(is.na(x8), mean(x8), x8)) |>
as.data.frame()
summary(time_clean)
time_clean <- time_raw |>
# need to try imputation instead of deletion
mutate(y1_i = ifelse(is.na(y1), mean(y1, na.rm = TRUE), y1)) |>
mutate(y2_i = ifelse(is.na(y2), mean(y2), y2)) |>
mutate(x1_i = ifelse(is.na(x1), mean(x1), x1)) |>
mutate(x2_i = ifelse(is.na(x2), mean(x2), x2)) |>
mutate(x3_i = ifelse(is.na(x3), mean(x3), x3)) |>
mutate(x4_i = ifelse(is.na(x4), mean(x4), x4)) |>
mutate(x5_i = ifelse(is.na(x5), mean(x5), x5)) |>
mutate(x6_i = ifelse(is.na(x6), mean(x6), x6)) |>
mutate(x7_i = ifelse(is.na(x7), mean(x7), x7)) |>
mutate(x8_i = ifelse(is.na(x8), mean(x8), x8)) |>
as.data.frame()
summary(time_clean)
time_clean <- time_raw |>
# need to try imputation instead of deletion
mutate(y1 = ifelse(is.na(y1), mean(y1, na.rm = TRUE), y1)) |>
mutate(y2 = ifelse(is.na(y2), mean(y2, na.rm = TRUE), y2)) |>
mutate(x1 = ifelse(is.na(x1), mean(x1, na.rm = TRUE), x1)) |>
mutate(x2 = ifelse(is.na(x2), mean(x2, na.rm = TRUE), x2)) |>
mutate(x3 = ifelse(is.na(x3), mean(x3, na.rm = TRUE), x3)) |>
mutate(x4 = ifelse(is.na(x4), mean(x4, na.rm = TRUE), x4)) |>
mutate(x5 = ifelse(is.na(x5), mean(x5, na.rm = TRUE), x5)) |>
mutate(x6 = ifelse(is.na(x6), mean(x6, na.rm = TRUE), x6)) |>
mutate(x7 = ifelse(is.na(x7), mean(x7, na.rm = TRUE), x7)) |>
mutate(x8 = ifelse(is.na(x8), mean(x8, na.rm = TRUE), x8)) |>
as.data.frame()
summary(time_clean)
time_clean <- time_clean |>
mutate(timestamp = ymd_hms(Description)) |>
mutate(day = ymd(substr(Description, start = 1, stop=10))) |>
mutate(hour = paste("2016-09-30 ", format(timestamp, "%H:%M:%S"))) |>
select(-Description)
summary(time_clean$timestamp)
daily <- time_clean |>
group_by(day) |>
summarize(y1 = mean(y1),
y2 = mean(y2),
x1 = mean(x1),
x2 = mean(x2),
x3 = mean(x3),
x4 = mean(x4),
x5 = mean(x5),
x6 = mean(x6),
x7 = mean(x7),
x8 = mean(x8))
hourly <- time_clean |>
group_by(hour) |>
summarize(y1 = mean(y1),
y2 = mean(y2),
x1 = mean(x1),
x2 = mean(x2),
x3 = mean(x3),
x4 = mean(x4),
x5 = mean(x5),
x6 = mean(x6),
x7 = mean(x7),
x8 = mean(x8))
ggplot(daily, aes(x=day, y=y1)) +
geom_point()
ggplot(hourly, aes(x=hour, y=y1)) +
geom_point()
y1_day <- xts(daily$y1, daily$day)
Acf(x = y1_day, main = "Autocorrelation Function for Y1 by Day")
Pacf(x = y1_day, main = "Partial Autocorrelation Function for Y1 by Day")
y1_hour <- xts(hourly$y1, as.POSIXct(hourly$hour))
Acf(x = y1_hour, main = "Autocorrelation Function for Y1 by Hour")
Pacf(x = y1_hour, main = "Partial Autocorrelation Function for Y1 by Hour")
ggplot(daily, aes(x=day, y=y2)) +
geom_point()
ggplot(hourly, aes(x=hour, y=y2)) +
geom_point()
y2_day <- xts(daily$y2, daily$day)
Acf(x = y2_day, main = "Autocorrelation Function for Y2 by Day")
Pacf(x = y2_day, main = "Partial Autocorrelation Function for Y2 by Day")
y2_hour <- xts(hourly$y2, as.POSIXct(hourly$hour))
Acf(x = y2_hour, main = "Autocorrelation Function for Y2 by Hour")
Pacf(x = y2_hour, main = "Partial Autocorrelation Function for Y2 by Hour")
y1_full <- xts(x = time_clean$y1,
order.by = time_clean$timestamp)
y2_full <- xts(x = time_clean$y2,
order.by = time_clean$timestamp)
# also prep predictor matrix, which applies to both models
x_all <- as.matrix(time_clean[, c(3:10)])
y1_null <- auto.arima(y = y1_full)
time_clean <- time_clean |>
mutate(timestamp = ymd_hms(Description)) |>
mutate(day = ymd(substr(Description, start = 1, stop=10))) |>
mutate(hour = paste("2016-09-30 ", format(timestamp, "%H:%M:%S"))) |>
mutate(from_start = timestamp - timestamp[i])
time_clean <- time_raw |>
# need to try imputation instead of deletion
mutate(y1 = ifelse(is.na(y1), mean(y1, na.rm = TRUE), y1)) |>
mutate(y2 = ifelse(is.na(y2), mean(y2, na.rm = TRUE), y2)) |>
mutate(x1 = ifelse(is.na(x1), mean(x1, na.rm = TRUE), x1)) |>
mutate(x2 = ifelse(is.na(x2), mean(x2, na.rm = TRUE), x2)) |>
mutate(x3 = ifelse(is.na(x3), mean(x3, na.rm = TRUE), x3)) |>
mutate(x4 = ifelse(is.na(x4), mean(x4, na.rm = TRUE), x4)) |>
mutate(x5 = ifelse(is.na(x5), mean(x5, na.rm = TRUE), x5)) |>
mutate(x6 = ifelse(is.na(x6), mean(x6, na.rm = TRUE), x6)) |>
mutate(x7 = ifelse(is.na(x7), mean(x7, na.rm = TRUE), x7)) |>
mutate(x8 = ifelse(is.na(x8), mean(x8, na.rm = TRUE), x8)) |>
as.data.frame()
summary(time_clean)
time_clean <- time_clean |>
mutate(timestamp = ymd_hms(Description)) |>
mutate(day = ymd(substr(Description, start = 1, stop=10))) |>
mutate(hour = paste("2016-09-30 ", format(timestamp, "%H:%M:%S"))) |>
mutate(from_start = timestamp - timestamp[i])
time_clean <- time_clean |>
mutate(timestamp = ymd_hms(Description)) |>
mutate(day = ymd(substr(Description, start = 1, stop=10))) |>
mutate(hour = paste("2016-09-30 ", format(timestamp, "%H:%M:%S"))) |>
mutate(from_start = timestamp - timestamp[1])
select(-Description)
time_clean <- time_raw |>
# need to try imputation instead of deletion
mutate(y1 = ifelse(is.na(y1), mean(y1, na.rm = TRUE), y1)) |>
mutate(y2 = ifelse(is.na(y2), mean(y2, na.rm = TRUE), y2)) |>
mutate(x1 = ifelse(is.na(x1), mean(x1, na.rm = TRUE), x1)) |>
mutate(x2 = ifelse(is.na(x2), mean(x2, na.rm = TRUE), x2)) |>
mutate(x3 = ifelse(is.na(x3), mean(x3, na.rm = TRUE), x3)) |>
mutate(x4 = ifelse(is.na(x4), mean(x4, na.rm = TRUE), x4)) |>
mutate(x5 = ifelse(is.na(x5), mean(x5, na.rm = TRUE), x5)) |>
mutate(x6 = ifelse(is.na(x6), mean(x6, na.rm = TRUE), x6)) |>
mutate(x7 = ifelse(is.na(x7), mean(x7, na.rm = TRUE), x7)) |>
mutate(x8 = ifelse(is.na(x8), mean(x8, na.rm = TRUE), x8)) |>
as.data.frame()
summary(time_clean)
time_clean <- time_clean |>
mutate(timestamp = ymd_hms(Description)) |>
mutate(day = ymd(substr(Description, start = 1, stop=10))) |>
mutate(hour = paste("2016-09-30 ", format(timestamp, "%H:%M:%S"))) |>
mutate(from_start = timestamp - timestamp[1])
select(-Description)
time_clean <- time_raw |>
# delete missing y's, impute missing x's
filter(!is.na(y1)) |>
filter(!is.na(y2)) |>
mutate(x1 = ifelse(is.na(x1), mean(x1, na.rm = TRUE), x1)) |>
mutate(x2 = ifelse(is.na(x2), mean(x2, na.rm = TRUE), x2)) |>
mutate(x3 = ifelse(is.na(x3), mean(x3, na.rm = TRUE), x3)) |>
mutate(x4 = ifelse(is.na(x4), mean(x4, na.rm = TRUE), x4)) |>
mutate(x5 = ifelse(is.na(x5), mean(x5, na.rm = TRUE), x5)) |>
mutate(x6 = ifelse(is.na(x6), mean(x6, na.rm = TRUE), x6)) |>
mutate(x7 = ifelse(is.na(x7), mean(x7, na.rm = TRUE), x7)) |>
mutate(x8 = ifelse(is.na(x8), mean(x8, na.rm = TRUE), x8)) |>
as.data.frame()
summary(time_clean)
time_clean <- time_clean |>
mutate(timestamp = ymd_hms(Description)) |>
mutate(day = ymd(substr(Description, start = 1, stop=10))) |>
mutate(hour = paste("2016-09-30 ", format(timestamp, "%H:%M:%S"))) |>
mutate(from_start = timestamp - timestamp[1])
select(-Description)
time_clean <- time_raw |>
# delete missing y's, impute missing x's
filter(!is.na(y1)) |>
filter(!is.na(y2)) |>
mutate(x1 = ifelse(is.na(x1), mean(x1, na.rm = TRUE), x1)) |>
mutate(x2 = ifelse(is.na(x2), mean(x2, na.rm = TRUE), x2)) |>
mutate(x3 = ifelse(is.na(x3), mean(x3, na.rm = TRUE), x3)) |>
mutate(x4 = ifelse(is.na(x4), mean(x4, na.rm = TRUE), x4)) |>
mutate(x5 = ifelse(is.na(x5), mean(x5, na.rm = TRUE), x5)) |>
mutate(x6 = ifelse(is.na(x6), mean(x6, na.rm = TRUE), x6)) |>
mutate(x7 = ifelse(is.na(x7), mean(x7, na.rm = TRUE), x7)) |>
mutate(x8 = ifelse(is.na(x8), mean(x8, na.rm = TRUE), x8)) |>
as.data.frame()
summary(time_clean)
time_clean <- time_clean |>
mutate(timestamp = ymd_hms(Description)) |>
mutate(day = ymd(substr(Description, start = 1, stop=10))) |>
mutate(hour = paste("2016-09-30 ", format(timestamp, "%H:%M:%S"))) |>
mutate(from_start = timestamp - timestamp[1])
select(-Description)
View(time_clean)
time_clean <- time_clean |>
mutate(timestamp = ymd_hms(Description)) |>
mutate(day = ymd(substr(Description, start = 1, stop=10))) |>
mutate(hour = paste("2016-09-30 ", format(timestamp, "%H:%M:%S"))) |>
mutate(from_start = timestamp - timestamp[1]) |>
select(-Description)
summary(time_clean$timestamp)
daily <- time_clean |>
group_by(day) |>
summarize(y1 = mean(y1),
y2 = mean(y2),
x1 = mean(x1),
x2 = mean(x2),
x3 = mean(x3),
x4 = mean(x4),
x5 = mean(x5),
x6 = mean(x6),
x7 = mean(x7),
x8 = mean(x8))
hourly <- time_clean |>
group_by(hour) |>
summarize(y1 = mean(y1),
y2 = mean(y2),
x1 = mean(x1),
x2 = mean(x2),
x3 = mean(x3),
x4 = mean(x4),
x5 = mean(x5),
x6 = mean(x6),
x7 = mean(x7),
x8 = mean(x8))
ggplot(daily, aes(x=day, y=y1)) +
geom_point()
ggplot(hourly, aes(x=hour, y=y1)) +
geom_point()
y1_day <- xts(daily$y1, daily$day)
Acf(x = y1_day, main = "Autocorrelation Function for Y1 by Day")
Pacf(x = y1_day, main = "Partial Autocorrelation Function for Y1 by Day")
y1_hour <- xts(hourly$y1, as.POSIXct(hourly$hour))
Acf(x = y1_hour, main = "Autocorrelation Function for Y1 by Hour")
Pacf(x = y1_hour, main = "Partial Autocorrelation Function for Y1 by Hour")
ggplot(daily, aes(x=day, y=y2)) +
geom_point()
ggplot(hourly, aes(x=hour, y=y2)) +
geom_point()
y2_day <- xts(daily$y2, daily$day)
Acf(x = y2_day, main = "Autocorrelation Function for Y2 by Day")
Pacf(x = y2_day, main = "Partial Autocorrelation Function for Y2 by Day")
y2_hour <- xts(hourly$y2, as.POSIXct(hourly$hour))
Acf(x = y2_hour, main = "Autocorrelation Function for Y2 by Hour")
Pacf(x = y2_hour, main = "Partial Autocorrelation Function for Y2 by Hour")
y1_full <- xts(x = time_clean$y1,
order.by = time_clean$timestamp)
y2_full <- xts(x = time_clean$y2,
order.by = time_clean$timestamp)
# also prep predictor matrix, which applies to both models
x_all <- as.matrix(time_clean[, c(3:10)])
y1_null <- auto.arima(y = y1_full)
y1_null <- Arima(y = y1_full,
order = c(1,0,0))
y1_null <- Arima(y = y1_full,
order = c(1,0,0),
seasonal = FALSE)
y1_null <- Arima(y = y1_full,
order = c(1,0,0),
seasonal = c(0,0,0))
y1_null <- auto.arima(y = y1_full,
seasonal = FALSE)
y1_day <- ts(daily$y1, daily$day)
Acf(x = y1_day, main = "Autocorrelation Function for Y1 by Day")
Pacf(x = y1_day, main = "Partial Autocorrelation Function for Y1 by Day")
y1_hour <- ts(hourly$y1, as.POSIXct(hourly$hour))
Acf(x = y1_hour, main = "Autocorrelation Function for Y1 by Hour")
Pacf(x = y1_hour, main = "Partial Autocorrelation Function for Y1 by Hour")
ggplot(daily, aes(x=day, y=y2)) +
geom_point()
ggplot(hourly, aes(x=hour, y=y2)) +
geom_point()
y2_day <- ts(daily$y2, daily$day)
Acf(x = y2_day, main = "Autocorrelation Function for Y2 by Day")
Pacf(x = y2_day, main = "Partial Autocorrelation Function for Y2 by Day")
y2_hour <- ts(hourly$y2, as.POSIXct(hourly$hour))
Acf(x = y2_hour, main = "Autocorrelation Function for Y2 by Hour")
Pacf(x = y2_hour, main = "Partial Autocorrelation Function for Y2 by Hour")
y1_full <- ts(x = time_clean$y1,
order.by = time_clean$timestamp)
y1_full <- ts(time_clean$y1, time_clean$timestamp)
y2_full <- ts(time_clean$y2, time_clean$timestamp)
# also prep predictor matrix, which applies to both models
x_all <- as.matrix(time_clean[, c(3:10)])
y1_null <- auto.arima(y = y1_full,
seasonal = FALSE)
summary(y1_null)
y1_null <- auto.arima(y = y1_full)
summary(y1_null)
y1_fit <- auto.arima(y = y1_full, xreg = x_all)
summary(y1_null)
summary(y1_fit)
y2_null <- auto.arima(y = y2_full)
summary(y2_null)
y2_fit <- auto.arima(y = y2_full, xreg = x_all)
summary(y2_fit)
tsdisplay(residuals(y1_fit), lag.max = 40, main = "Y1 Full Model Residuals")
tsdisplay(residuals(y2_fit), lag.max = 40, main = "Y2 Full Model Residuals")
term <- 12*24*14
y1_fcast <- forecast(y1_fit, h = term)
term <- 12*24*14
y1_fcast <- forecast(object = y1_fit, h = term)
term <- 12*24*14 # next 14 days in 5-minute intervals
y1_fcast <- forecast(y1_fit, h = term)
term <- 12*24*14 # next 14 days in 5-minute intervals
y2_fcast <- forecast(y2_fit, h = term)
tsdisplay(residuals(y1_fit), lag.max = 40, main = "Y1 (5,1,5) Full Model Residuals")
term <- 12*24*14 # next 14 days in 5-minute intervals
y1_fcast <- forecast(y1_fit, h = term)
tsdisplay(residuals(y2_fit), lag.max = 40, main = "Y2 (2,1,0) Full Model Residuals")
term <- 12*24*14 # next 14 days in 5-minute intervals
y1_fcast <- forecast(y1_null, h = term)
plot(y1_fcast)
term <- 12*24*14 # next 14 days in 5-minute intervals
y2_fcast <- forecast(y2_null, h = term)
plot(y2_fcast)
library(forecast)
library(lubridate)
library(dplyr)
library(ggplot2)
time_raw <- read.csv("./dataset_for_technical_assessment.csv")
summary(time_raw)
time_clean <- time_raw |>
# delete missing y's, impute missing x's
filter(!is.na(y1)) |>
filter(!is.na(y2)) |>
mutate(x1 = ifelse(is.na(x1), mean(x1, na.rm = TRUE), x1)) |>
mutate(x2 = ifelse(is.na(x2), mean(x2, na.rm = TRUE), x2)) |>
mutate(x3 = ifelse(is.na(x3), mean(x3, na.rm = TRUE), x3)) |>
mutate(x4 = ifelse(is.na(x4), mean(x4, na.rm = TRUE), x4)) |>
mutate(x5 = ifelse(is.na(x5), mean(x5, na.rm = TRUE), x5)) |>
mutate(x6 = ifelse(is.na(x6), mean(x6, na.rm = TRUE), x6)) |>
mutate(x7 = ifelse(is.na(x7), mean(x7, na.rm = TRUE), x7)) |>
mutate(x8 = ifelse(is.na(x8), mean(x8, na.rm = TRUE), x8)) |>
as.data.frame()
summary(time_clean)
time_clean <- time_clean |>
mutate(timestamp = ymd_hms(Description)) |>
mutate(day = ymd(substr(Description, start = 1, stop=10))) |>
mutate(hour = paste("2016-09-30 ", format(timestamp, "%H:%M:%S"))) |>
mutate(from_start = timestamp - timestamp[1]) |>
select(-Description)
summary(time_clean$timestamp)
ggplot(daily, aes(x=day, y=y1)) +
geom_point()
daily <- time_clean |>
group_by(day) |>
summarize(y1 = mean(y1),
y2 = mean(y2),
x1 = mean(x1),
x2 = mean(x2),
x3 = mean(x3),
x4 = mean(x4),
x5 = mean(x5),
x6 = mean(x6),
x7 = mean(x7),
x8 = mean(x8))
hourly <- time_clean |>
group_by(hour) |>
summarize(y1 = mean(y1),
y2 = mean(y2),
x1 = mean(x1),
x2 = mean(x2),
x3 = mean(x3),
x4 = mean(x4),
x5 = mean(x5),
x6 = mean(x6),
x7 = mean(x7),
x8 = mean(x8))
ggplot(daily, aes(x=day, y=y1)) +
geom_point()
ggplot(hourly, aes(x=hour, y=y1)) +
geom_point()
y1_day <- ts(daily$y1, daily$day)
Acf(x = y1_day, main = "Autocorrelation Function for Y1 by Day")
Pacf(x = y1_day, main = "Partial Autocorrelation Function for Y1 by Day")
y1_hour <- ts(hourly$y1, as.POSIXct(hourly$hour))
Acf(x = y1_hour, main = "Autocorrelation Function for Y1 by Hour")
Pacf(x = y1_hour, main = "Partial Autocorrelation Function for Y1 by Hour")
ggplot(daily, aes(x=day, y=y2)) +
geom_point()
ggplot(hourly, aes(x=hour, y=y2)) +
geom_point()
y2_day <- ts(daily$y2, daily$day)
Acf(x = y2_day, main = "Autocorrelation Function for Y2 by Day")
Pacf(x = y2_day, main = "Partial Autocorrelation Function for Y2 by Day")
y2_hour <- ts(hourly$y2, as.POSIXct(hourly$hour))
Acf(x = y2_hour, main = "Autocorrelation Function for Y2 by Hour")
Pacf(x = y2_hour, main = "Partial Autocorrelation Function for Y2 by Hour")
y1_full <- ts(time_clean$y1, time_clean$timestamp)
y2_full <- ts(time_clean$y2, time_clean$timestamp)
# also prep predictor matrix, which applies to both models
x_all <- as.matrix(time_clean[, c(3:10)])
y1_null <- auto.arima(y = y1_full)
summary(y1_null)
y1_fit <- auto.arima(y = y1_full, xreg = x_all)
summary(y1_fit)
tsdisplay(residuals(y1_fit), lag.max = 40, main = "Y1 (5,1,5) Full Model Residuals")
term <- 12*24*14 # next 14 days in 5-minute intervals
y1_fcast <- forecast(y1_null, h = term)
plot(y1_fcast)
y2_null <- auto.arima(y = y2_full)
summary(y2_null)
y2_fit <- auto.arima(y = y2_full, xreg = x_all)
summary(y2_fit)
tsdisplay(residuals(y2_fit), lag.max = 40, main = "Y2 (2,1,0) Full Model Residuals")
term <- 12*24*14 # next 14 days in 5-minute intervals
y2_fcast <- forecast(y2_null, h = term)
plot(y2_fcast)
